/**
  ******************************************************************************
  * @file    main.c
  * @author  Ac6
  * @version V1.0
  * @date    01-December-2013
  * @brief   Default main function.
  ******************************************************************************
*/

#include<stdio.h>
#include<stdint.h>
#include<string.h>

#include "stm32f4xx.h"
#include "FreeRTOS.h"
#include "Task.h"
			
TaskHandle_t  xTask1_handle = NULL;
TaskHandle_t  xTask2_handle = NULL;

// Task -1 and Task - 2 function prototypes
void vTask1_handler (void *params);
void vTask2_handler (void *params);
void prevHardwareConfig(void);

#ifdef UseSemiHosting
// used for semihosting
extern void initialise_monitor_handles();
#endif

int main(void)
{
#ifdef UseSemiHosting
	// for semihosting
	initialise_monitor_handles();
#endif

	printf("This is a Hello World example code\r\n");

	// 1. Deinitialize SystemCoreClock settings (default) of FreeRTOS to make the sysclock run at 16MHz
	RCC_DeInit();

	SystemCoreClockUpdate();

	// Create Task - 1
	xTaskCreate(vTask1_handler, "Task - 1", configMINIMAL_STACK_SIZE, NULL, 2, &xTask1_handle);

	// Create Task - 2
	xTaskCreate(vTask2_handler, "Task - 2", configMINIMAL_STACK_SIZE, NULL, 2, &xTask2_handle);

	// FreeRTOS will put the tasks to ready state once created, from here the tasks at ready state needs to be picked up
	// by the scheduler

	// Starting the Scheduler
	vTaskStartScheduler();

	// Initialise USART2 peripheral
	prevHardwareConfig();

	for(;;);
}

// Create Task -1 function
void vTask1_handler (void *params){
	while(1){

	}
}

// Create Task -2 function
void vTask2_handler (void *params){
	while(1){

	}
}

void prevHardwareConfig(void){

	GPIO_InitTypeDef gpio_usart2;
	USART_InitTypeDef huart2;

	// 1. Enable USART2 clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
	// 1. Enable GPIOA clock
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);

	// 2. GPIO Usart2 pin muxing
	/*
	 * PA2 --> Tx
	 * PA3 --> Rx
	 * */
	memset(&gpio_usart2, 0, sizeof(gpio_usart2));
	gpio_usart2.GPIO_Pin = 2;
	gpio_usart2.GPIO_Mode = GPIO_Mode_AF;
	gpio_usart2.GPIO_PuPd = GPIO_PuPd_UP;

	GPIO_Init(GPIOA, &gpio_usart2);

	// 3. USART2 application specific initialization
	memset(&huart2, 0, sizeof(huart2));
	huart2.USART_BaudRate = 115200;
	huart2.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
	huart2.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
	huart2.USART_Parity = USART_Parity_No;
	huart2.USART_StopBits = USART_StopBits_1;
	huart2.USART_WordLength = USART_WordLength_8b;

	USART_Init(USART2, &huart2);

}
